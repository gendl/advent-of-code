(in-package :gdl-user)(gdl:define-package :aoc2022-day-17)
(in-package :aoc2022-day-17)

(defparameter *puzzle-input* nil) (defparameter *puzzle-input-test* nil)



(defun part-1 ()
  (the-object (make-object 'puzzle
                           :puzzle-input *puzzle-input*) answer))

(defun part-2 ()
  (the-object (make-object 'puzzle
                            :puzzle-input *puzzle-input* :puzzle-part 2) answer))

(defparameter *print?* nil)

(define-object puzzle (base-object)
  :input-slots ((puzzle-input *puzzle-input-test*)
                (puzzle-part 1)
                (rock-shapes '(((0 1 2 3))
                               ((1)(0 1 2)(1))
                               ((0 1 2)(2)(2))
                               ((0)(0)(0)(0))
                               ((0 1)(0 1))))
                (chamber-width 7)
                (chamber-height #.(* 3 2020))
                (empty-char #\.)
                (rock-char #\#)
                (rock-elevation 3)
                (rock-offset 2)
                (falling-rock-char #\@)
                (min-to-print 10)
                ;;(drops 3)
                ;;(drops 12)
                (drops 10)
                ;;(drops 2020)
                )

  
  :computed-slots ((answer nil)

                   (moves (the puzzle-input))
                   
                   (grid (make-array (list (the chamber-width)
                                           (the chamber-height))
                                     :initial-element (the empty-char)))

                   (filled-grid (first (the filled-grid&floor)))
                   (floor (second (the filled-grid&floor)))
                   
                   (filled-grid&floor (let ((grid (alexandria:copy-array (the grid)))
                                      (move 0) (floor 0))
                                  (dotimes (drop (the drops) grid)
                                    (destructuring-bind (new-floor new-move)
                                        (the (drop-rock :grid grid
                                                        :rock (the (get-rock drop))
                                                        :floor floor :move move))
                                      (print-variables new-move new-floor)
                                      (setq move new-move floor new-floor)))
                                  (list grid (1- floor))))


                   (x-indices (list-of-numbers
                               0 (1- (first (array-dimensions (the grid))))))
                   
                   (shape-vecs (make-array
                                (length (the rock-shapes))
                                :initial-contents
                                (let (y)
                                  (mapcar #'(lambda(shape)(setq y -1)
                                              (mapcan #'(lambda(layer)(incf y)
                                                          (mapcar #'(lambda(x)(vec x y))
                                                                  layer)) shape))
                                          (the rock-shapes))))))

  
  :functions ((get-rock (index) (aref (the shape-vecs) (mod index (length (the shape-vecs)))))

              (get-move (index) (aref (the moves) (mod index (length (the moves)))))

              (drop-rock
               (&key grid rock floor move)
               (let* ((elevation (vec 0 (+ floor (the rock-elevation))))
                      (rock (mapcar #'(lambda(stone) (add-vecs stone elevation)) rock))
                      (rock (the (apply-offset rock (the rock-offset)))))
                 (the (do-move :grid grid :rock rock :move move))))

              (do-move (&key grid rock move)
                (let ((move-char (the (get-move move))))
                  (ecase move-char
                    (#\< (when (and (> (get-x (least #'get-x rock)) 0)
                                    (the (can-move? :direction :left :grid grid :rock rock)))
                           (setq rock (mapcar #'(lambda(stone)
                                                  (vec (1- (get-x stone)) (get-y stone)))
                                              rock))))
                    (#\> (when (and (< (get-x (most #'get-x rock)) (1- (the chamber-width)))
                                    (the (can-move? :direction :right :grid grid :rock rock)))
                           (setq rock (mapcar #'(lambda(stone)
                                                  (vec (1+ (get-x stone)) (get-y stone)))
                                              rock)))))
                  (when *print?*
                    (format t "~&~%Jet of gas pushes rock ~a.~%" (ecase move-char
                                                                   (#\< "left")
                                                                   (#\> "right")))
                    (the (print :grid grid :rock rock))))

                (if (the (can-move? :direction :down :grid grid :rock rock))
                    (the (do-drop :grid grid :rock rock :move (1+ move)))
                    (progn (mapc #'(lambda(stone)
                                     (setf (aref grid (get-x stone) (get-y stone))
                                           (the rock-char))) rock)
                           (list (1+ (get-y (most #'get-y rock))) (1+ move)))))

              (can-move?
               (&key direction grid rock)
               (let* ((min-x (get-x (least #'get-x rock)))
                      (max-x (get-x (most #'get-x rock)))
                      (min-y (get-y (least #'get-y rock)))
                      (move-possible?
                        (ecase direction
                          (:left (plusp min-x))
                          (:right (< max-x (1- (the chamber-width))))
                          (:down (plusp min-y)))))
                 (and move-possible?
                      (every #'(lambda(stone)
                                 (eql (aref grid
                                            (ecase direction
                                              (:left (1- (get-x stone)))
                                              (:right (1+ (get-x stone)))
                                              (:down (get-x stone)))
                                            (ecase direction
                                              (:left (get-y stone))
                                              (:right (get-y stone))
                                              (:down (1- (get-y stone)))))
                                      (the empty-char)))
                             (remove-if-not
                              #'(lambda(stone)
                                  (ecase direction
                                    (:left (= (get-x stone) min-x))
                                    (:right (= (get-x stone) max-x))
                                    (:down (= (get-y stone) min-y))))
                              rock)))))
              
              #+nil
              (can-move-left? (&key grid rock)
                              (let* ((min-x (get-x (least #'get-x rock)))
                                     (min-stones
                                       (remove-if-not
                                        #'(lambda(stone) (= (get-x stone) min-x)) rock)))
                                (and (plusp min-x)
                                     (every #'(lambda(stone)
                                                (char= (aref grid (1- (get-x stone))
                                                             (get-y stone)) (the empty-char)))
                                            min-stones))))

              #+nil
              (can-move-right? (&key grid rock)
                              (let* ((max-x (get-x (most #'get-x rock)))
                                     (max-stones
                                       (remove-if-not
                                        #'(lambda(stone) (= (get-x stone) max-x)) rock)))
                                (and (< max-x (1- (the chamber-width)))
                                     (every #'(lambda(stone)
                                                (char= (aref grid (1- (get-x stone))
                                                             (get-y stone)) (the empty-char)))
                                            max-stones))))                                    
              #+nil
              (can-drop? (&key grid rock)
                         (let* ((min-y (get-y (least #'get-y rock)))
                                (min-stones (remove-if-not #'(lambda(stone) (= (get-y stone) min-y))
                                                           rock)))
                           (and (plusp min-y)
                                (every #'(lambda(stone)
                                           (eql (aref grid (get-x stone) (1- (get-y stone)))
                                                (the empty-char))) min-stones))))

              
              
              (do-drop (&key grid rock move)
                (let ((rock (mapcar #'(lambda(stone) (vec (get-x stone)(1- (get-y stone)))) rock)))
                  (when *print?* (format t "~&~%Rock falls 1 unit~%")

                        (the (print :grid grid :rock rock)))
                (the (do-move :grid grid :rock rock :move move))))
  

              (apply-offset (rock offset)
                            (let* ((x-min (get-x (least #'get-x rock)))
                                   (offset (vec (+ x-min offset) 0)))
                              (mapcar #'(lambda(stone) (add-vecs stone offset)) rock)))

              
              (print (&key (grid (the grid)) rock)
                     (mapc #'(lambda(stone)
                               (setf (aref grid (get-x stone)(get-y stone)) (the falling-rock-char)))
                           rock)
                     (destructuring-bind (width height) (array-dimensions grid)
                       (let (print?)
                         (dotimes (y height) 
                           (let ((y-index (- height y 1)))
                             (when (or (the (occupied? :grid grid :row y-index))
                                       (< y-index (the min-to-print)))
                               (setq print? t))
                             (when print?
                               (format t "~&|")
                               (dotimes (x width)
                                 (format t "~a" (aref grid x y-index)))
                               (format t "|~%"))))
                         (format t "+")
                         (dotimes (n width) (format t "-"))
                         (format t "+")))
                     (mapc #'(lambda(stone)
                               (setf (aref grid (get-x stone)(get-y stone)) (the empty-char)))
                           rock))

              
              (occupied? (&key grid row)
                         (some #'(lambda (x) (not (eql (aref grid x row) (the empty-char))))
                               (the x-indices)))))
                     




(defun vec (x y) (make-array 2 :initial-contents (list x y)))

(defun add-vecs (v1 v2)
  (vec (+ (svref v1 0) (svref v2 0))(+ (svref v1 1) (svref v2 1))))

(defun subtract-vecs (v1 v2)
  (vec (- (svref v1 0) (svref v2 0))(- (svref v1 1) (svref v2 1))))


(setq *puzzle-input-test* ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"

      *puzzle-input* ">>><<<>>>><<<<>><<<<>><>>><>>>><><<<<>>>><<>>><<<>><>>><<>><>>><<>>><<>><>>><>>><<<<><<<>><<<>>><<>>>><>>>><<<<>>>><<<>>>><<<>>>><<<>>>><<<<><<<<><<<>>>><<<>>><<<><<<>>>><<>><<<>><<<><<<><<>><<>>>><<>>><<><<>><<><<>>><<>>>><<<><>>><<<<>>><<<<><><<<><<>>><<>><>>>><<<<><<>>><<<>>><<<<>>>><<<<>><<<>>><<<<>>><<<>>>><<<>>>><<<>>>><<<<>>><<<>>>><<<><><<<><<<><>>>><>><>>><<><<<>>><><<<>><<<<>><<>><>><>>>><<<<>>><<>>>><<><<>><<<<>><><<>>>><<<>>>><<<>><<<<>>><<<<>>>><>>>><<>><<<><<<>><<<<>>><<<<>><<>><><<<<>>><<><<<>>>><<>>>><<<<>>>><<<>>>><<<>>><<>>>><>>>><<>>><<<>>>><>>>><<<<>>>><>>>><<<><<<>>>><>><>>><>>>><<<><>><<<<><<><>>>><<><<<<><<<>>><><>>>><<><>>>><<<>>><<<<>>><>>>><<<>>><<<<>>>><<>><<<>>><<>>>><<><<<<><><<<<>>><<<<>>><<<<>>><<>>><<<>><<>>><<<<>>>><<<<>>>><<<>>><>>>><<<<>>><>><<>>><<><<<<>><<>>><<<><><<<<>>>><<<>><><<>>><<>><<><>>><<<>>>><<<<>>><<<><<>><<>>><>><<>>>><<>>>><<>>>><<>>>><<>><>>>><<><>>>><<<>>>><<<>>><<><<<<><>><<<>><<<<>><<<<>><<>>>><<<>><<>><>>>><<<>>>><<<>>>><<<<>>><<<<>><<><<<>>>><<<>>>><<>>><<><><<<<>><<<<><<<><<>><<><<<<>><<<<>><<<<><<<<>>>><<<>><<<><<<<>>><>><>>><>>><<><<<<>>><<<<>>>><<<><<<>><<<>><<<>>><<>>><<<>>><>>><<><>>>><<<<>>><<<<>>>><<<>>>><>>><>><<>><<<>><><<<>>>><<<>>><><<><<><<<<><<<<>>><<<<><>>>><<<>>>><<>>><<<<>>>><<<<>>><<>>><>>>><>><<<>>><<<<>>>><>><<>>><<<><<<>>><<<<><<<<><>>>><<><>><<<<>><<<<>>>><>>>><<>>><<<<><<<><<>>>><<><<<>>><<<><<<<>><<>>><<<<>><>>>><><<<<>>><<<>>>><><<>>>><<<<>>>><<<<>><<<>>><<<<>>><<<>>><>>>><<>><>><<<<><<<>><<>>>><>><>>>><<<>>><<><<<>><<>><<<>><<>>><<<<>><><<<>>><<<<>>><<<>>><<<<>>><<<<>>><<>>><>>><<>>><<<>><>><<<>>><<<<>><>>>><<<>>><>><>><<<>>><>>><<>>><<>><<<<>>>><<>>>><<<<>><>>><<<<>>><<<<>>>><<<>>>><>><<<>>>><<<><<>>><<><>><<<>>><<<>>><<><>>><<>>>><<<><<<<><><>>><<<<>>>><<<<><<<>><<<>><<<>>><<<>>>><>>><<<>>><<<<>><<>><<<>>>><<<><<>>><<<>><<<<>>>><<<<>><<<><<<>>><<<<><>><<<><<<<>>>><<><>><<<>>><<>>>><>>>><<<><<<<>>>><<>>>><<>><<<>>>><><<<>><<>>><<><<<<>>><<>><<<>><<<<>>>><<>>><<>>><<<<>>>><<>>><<<>><<>>>><<>><<<>>><<<>>><<>>>><<<<><>><>>><<<<>>><<<><<>><<<><<<>>><>><<<><<><<<>>><<><<>>><>><<<>>>><<><>><<<>>><<<>>>><<>><><>>><<<<>>><<>><<<><<<<>>>><>>><<<<>>><><><<<<><><<>><<>><>>>><<<<>>><<<>>>><><<<<>><<<<>><<><<<<>>><>>><<<><<<>>><<<>>><<<<>>><<>><<<<><<<<>>>><<>><<<<>>><<<>><<>>><<<><<<>>>><<>><<<<>>><<<<>>>><<<>>>><<>>><>>><<<<><<<<><><<>>>><<<>><>>>><<<>>><>><>><><<>>><<<>>>><<<>><<><<><<>><<<<><<<><>>>><>>><>><>>><<<<>>><<<><>><<<<>>><<<<><><>>>><<>>>><<>>>><<>>>><<<<>>><>><<<<>>>><<<>><<><<<<>>>><>><<>><>><>>>><<>>><>>>><<<<>><<<>>><<<>>>><<<<>><<><<<<>><>>><<>>>><<<<>><<<<>><>>>><><<<<>>>><<><<<><<>><<<<>>>><<><<<<><<<<>>>><>><<>><<><<<<>><<<><<<<>>><><<>>><>>>><<<<>><>>><<<><<>>><>>>><>><<<>>>><>>><>><<<<>>><<<><<<<>>>><<<>>><<<>><<<>>>><<<>>><<<<>>><<<<><>>><<<<>>>><>><>>><>>><<>><<<>>>><<<>><<<>>><<<>>><<>>>><<<<><<<<><<<<>>>><<<>>><<<>>>><<<><<<<>>><<<<><<<<>><<<<>><>><<<<><<<<>>><<>><><<<<><><<<<>><<>>>><<>><>><<<<><<<<>>>><<>>>><<<>>><<<<>>>><<<<>>>><<<<>><<><>>>><>>>><<><<<<><<>><<>>>><<>><<<>>><>><><<<<><<><<>><<<>>><<>>><<>>>><<<><>>>><<<<>>>><<<>><<<><<<<><<><<<><<<>>>><<<<>>>><<<<><<<<><>>><><<<<>>>><<<<><<>><<<>>>><<<<>>><>><<<<>>><<<<>>>><<<<>>><>>><<>>><<<><>>><><<<<>>><>>><>><><<<>><>>>><><<<>><<><<<>>><<><<<<>>>><<<<>>>><<<<>><<<><<<><><>>><<<><>><<>>><>>>><<<<>>><<>>><<<<>>>><<<<>>><<<>><<<<><>><<<<>>><>><<<>>><<<<>><<<<>><<>>><<<<>>>><<<>>><<>>>><<>>>><<><<<<><<>>><<<<>><<>><<<><<<<>><<<>>><<<>>>><<<<>><>>>><>><<>>>><><<>><<<<><><<<>>><<<>><<<>>>><<<<>>>><<<<>>>><<<>>>><>>>><<<>>>><>><<<>><>>><<<><>>><<><>>><<<<>><<<<>><<><<<>>>><<<<>>><<<<>>>><<<<><<<<>>><<<>>><<<>><<<>>><<<<>><<<><<<>><<<><<<<>>>><<<>>><<<><<<<>>><<<>>>><><<<<>>><><<<>>>><<<<>><>>>><<><>>>><><<<><<<<>>>><<<>><<>>><<<<><<>>><><<><<>>><<<>>><<<<><<>><<><<<>>><<>>>><<<>>><<><>>><<<>><<<>>><>>>><<<<>>>><<>>>><<>><<>><<<<><<<>>>><<<<>>>><><<<><<>><<<<>>><>><>><<>>>><<<><<<>>>><>>><<><<><<<<>>>><<<>>>><<>><><<<<>>><<>>><<<<>><>><<<<><<>>><<<>>><<<<>>><>><<<>><<>>>><<<>>><><<<>><<<<>><>>><<>><<<<>>><<><<>>><>>><><<<<>>>><<<<>><<>><<<>>><<<<>>><<>>>><<><<<<>>>><>>><<>>>><>>><<<<>>>><<<<>>><<>>><<<>>><<<><<<<><>>>><<>><><<<<>>>><>>>><<<<>><>>>><>><>>>><<<<>>>><<>>>><<><<<<>>>><<<><>>><<<<><<>>><<<><<<<><>><<<>>><<>><<<<><<<>>>><<>><<>>><<<><<<<>><><<<><>>><<<<>>>><<>>><>>>><>>><<<<>>><<<><><<>>>><<<>><<<<>>>><<><<<>>><<<<>><<<<>>><>>>><<<<>><<>>><<<<>>><>>><<<<><<<>>>><<>>><<<<><<><<<>>>><<<<>><><<<<>>>><<<>>>><<<<><<>><<>>><<<>>><>><><<>>><<>><<<<><>><<<><>>><<<<>>><<>>><>><<<>>>><<<<>><><<<>><<<>><<>><<<>><<<<>>>><<<<><<<<>>>><<<<>>><<<><<<>>><>>>><<<>>><<<<>>>><>>>><>>><<<<>>>><<>>><<>>>><<>><>>><<>>>><>>>><<<<>>>><>>><<<><<<<><>>><<<<><>>>><<<>>>><>>><<>><<><<<>><<<<><<<><<<>><<<><<>>>><<<><<>>>><<><>><<>>><<>>><>><<<>><>>>><<>>>><<>>><>>><<<<>>>><<><<>>>><<<>>>><><<>>>><<<<>><>><<><>><<><>>><>>>><<<>>>><><<<>>><<<>>>><<<>>><<<>>><>><>>><>>>><<<><<<>><>>><<><<>><<<<><<>><<>><<<>>><<>>><<<<>>><<><>>><<>>>><<<><<<>>><><<<<><<><<<>><<<<>>><><<<<><<<<><>>>><<>>>><<<<>>><<<<>><<<<>><<<><<>><<>><>><<<<>>><<<<><>><<<<><<<<><<><<>><<<><<>>><<<<>>><<<>>>><<<>><>><<<>>><<<>><>>><<>>>><<>>><<<<>><<>>>><<<<><>>><<<><<<>>><<<>>><<><>>><>>>><<<>><<<<>><><<<>>>><<<<>>><<>><<<<>>><<<>><><<>>>><<>>>><<<>>>><<<><<<>>>><<<<>><<<<>>>><<>>><<<<><>>>><>>>><>><>>>><<<>>>><>>><<<<><<<><<<<>>><><<<<>><>><<>>>><<<>><<<>>>><>><<<><>>><<<><>><<<<>><<>>>><<>><>>><<<<>>><<<>><>>><<<>>><<>>><>>><<<<>>>><<>>>><>>>><<<<>><<<>><><>><<><<<>>>><<<>>><<<>>>><<<<>><<<<><<<>>>><<>><>><<<<>>><<>>>><>>>><<<<>>><><<<>>>><<<>>><<<>>>><<<><<>><<>>>><<<<>><<<>>>><<<>><<<<>>>><<>><<>>><<>>><<>>>><<>><>>><><<>>>><>><>><>><>><<<>><<<<>><>>><<<><><<<<>>>><<<>>>><<<<>><<<<><>>><<><<<<>><<<<>><<<>>>><<<<>>><>>>><<<<>>><>><>>>><<<>>><<<<>><>>>><<><<<<>>>><<<>>>><<<><<<>>>><<<>>><<<>><>>><<<>>><<<<>>>><<<>><>>>><<>>><<>>><><<<<>>><<>><<>>><<>>><<<<>>><<<>><>>><<>>>><<<>><<<>>>><<<>><<<<>><<>>>><<<<><>>><<<><<<>>>><<>><<<<><<<>>><>>><<<<>>><<<<>><<<<>><<<<>><<<>><<<>>><<<<>>>><<<>>>><><>><>><<<>>><<<<><<<<>>><<<<><<<<><><>>><<<>>>><<<<>>>><>><<<<><<<>><>>>><<<>><>>>><<<>><>>><<>>><<<<>><><<>>><<<<><<<<><<<><<<<>>><<><<><>>>><<><<<<>><>>><<<<>>><>>><<<<><<<<>>><>>>><<>>>><<<>>>><<<>>>><>>><>><<<<><<<<>><<<<>>>><<<<>><>>><<>>><<<>>><>>><<<><><><>>><<<<><<>>>><>><<>><<<<>><<<<>>><><<<<>><<>>><<<>>>><>><><><<<><>><<<<>>><>>>><>>><<>><<<<><<>>><<<>>><<><<<>>><>>>><<<<>>>><<<><>>><>>><<<>><>>><<><<>><<><<<>><><>>><<<<>>>><<<>><<<><<<>>><<>><>>>><>>>><<<>>><<<>>><<>>>><<<<><<>>>><<>>>><<<<>>>><<<<>>>><<<>>><<>>><<>><<>>><<<<>><<<><>>>><<<>>><<<>>><<>>>><>><<>>>><<<<>>><<>>><<<<>><<>>>><<<<>>><>>>><<>>><<<>>><<<>><<<<><>>>><<><<>>><>>><<<>><<><<<<>>>><<<<>><>>>><<>>><<<>><<>>>><>><<>><<<<>><<>>><>>><<<>><<>><><<<<>>><>><<><>>>><<>>>><<<<>><><>>>><>>>><>>>><<>><<<<><>>>><<<>><<<>>><<>><<<><<<<>>><>>>><<>>><<<<>><>><<<<>><>>>><<<>><<<<>>>><<<<>>><>>>><<><<<><<>>><<><<>><<<><<><>>>><<>>><>><<<<>>>><<<<><>><<<>><>><<<><><<<<>>><<>>><<<>><<<><<<>>>><<<<>>><<<><>>>><<<><<><>><<<<>>>><<<<><<>>><<<<>>><<>>><>>>><<<>>>><<><>>><<<<>><>>><<<><<<>>>><<<<>><<<<>>><>>>><<>>><>>>><>>>><<>>>><<<>><<<><<<><<>>>><<<<><<>>><<>><>><<>><<<>>><<<<>>>><<>>><<<>><<>>><><>>>><<<>>><<<<>>>><<<<>>><<<<>><<><<<>><>><<<<><<<<>>><<<<><<<<><<<>>><<<<>>><<<<>>>><<<>>>><<<<>>><<<<><<<>>>><<><<<>>>><<<<>>>><>>>><<<<>>><<><<>><<>><<>>>><<<<><>>><<><<>><<><<<>><<>>>><<<<><>><<<><<<><<<>>>><<<<><<><<<<><<>>><>>>><<>>><<<>>>><<><<<<><<<<>><<<<><<><<>><<>>>><>><<<>>><<><<<>>>><<<>>>><<>><<><>><>><<<<>><<<>><>>>><<<<><<<>>>><<><<<<>><<<<><<<<>><<<<>>>><<<>>><<<<>>><<><<<>>>><>>>><<<>>>><<<<>><<><<<<>>><<<>>><<>><<<><><<>>>><<><<<>>>><<<>>>><<<<>>>><>>>><<<>>>><<<>>><>><<<><<<>>><<><<>>>><<<><<<>>><<>><<<>><><<<<>><><<<><<>>><<<>><<<<>>>><<>><<<<>>><<<<><>><>>>><<>><<<<>>>><<>><<<<>>>><>>>><<<>><<<>>>><><>>>><<>>><<>>><<<>><>><<><>><<<<>><<<<><<><<<<>><<<>>><<<><<<>>>><<<>>>><<<>>>><<<<>>>><<>>><<<<>><<<<>><<>>><>>><<><>><<<><><>>>><<><>>><<>>><<<>><>>><<><<<<>>><<>><<<<>>><<><>><<><<<<>>><<<>>>><>><<<<><<>>><<>><<<>>>><<<>><<<<>><<<<><<<>><>>><<<<>><<<<>>>><<<<><<>>><>>><<<<>>>><<<<>>><><><<<><<<<>>><><>><>>>><>>><>>>><<<>>>><<>><<<<><<<>>>><>>><<<<>>>><<>>>><<<<><<><<>>>><<>>><>><><>>><<<<>><>><<>>><<<>><>>><<>><<<><<>>>><<<<>>><<>>>><<<<>>><<><<<>>>><<<>>><<<>>><><<<>><<<<>>><>><<<<>><<>>><<<<><<<<>><<<<>>><>>><<>>><<>><<<>><>>><<<<>>><<<<><<<>>><<<>>>><<><><<<><<>><<>>>><<<>>>><<<<><<<<>>><>>>><<><<<<>><<<<>>>><<<<>>>><>>><<<<>><<<>>>><<<<>>><<<<>>>><<<<><>>>><<><>><<><<><<>>><<<<><<>>><<>>>><<<>><<<<><<<>>>><<<><>><<<<>>><<<>>><<<><<>><<<<>><<<><<>>>><><>>><<>>>><<>><>>>><<<><<>>>><<>>><<<<>><<<>>>><<>>>><<<<>>>><<<<>>><>><<<>>><<<<><<<>>>><<<>>>><>><<<<>>><<>><<<>>>><<>>><>>><<<<>><>>><<<>>><<<<><><<<>><<<<>>>><<<<>>>><<<<>>><>><><<>>>><<<>>>><<<>><<<>>><<>><<<<>><><<><<>>>><<>>><<<><<>>>><<<<>>>><<<>><>>><><<<><<<>>><<><<<<>>>><<<<>>><<>><<>>><<<<><<>>>><<>>>><<<>>>><<><>><<<>><<<<>>><<<<>>><<>><<<<>>>><<<<>>>><<<<><<<<>>>><<>>>><<<>>><<>><>>><<>>><<>>><<<>>>><<<>>><><>>>><<>><>>>><<<>><>>><<<><<>>><<><<<>><>>><<>><>>><<>>>><<<<>><<>>>><>><<<><<<<>>><<<><>>><<<<>>>><<<>><<<<><>>><<<<>><>>><<<>>>><<>>>><<<<>>><<><<<<>>><<<>>><><<<>>>><<><<<>>>><<>><>>>><<>>>><><<<><<>>>><<>><<>>><>><><<<>>>><<>>><<<<>><>>>><<<>><<><>>><<><<<>>>><<><<>>><>>>><<>>>><<<><<>>><>>><>><>><<<>>>><<<><<<>><<<<>><<<>><<>>>><>>>><<<<>>>><<>>><<><<<>>><<<<>><<<<>>>><<>><<<<><<><>>>><<<>>>><<>>><><<<<>><>>><<<<><<<<>>>><<<<>><>><>>>><<<<>>><<>>><>>>><<>>><<<<>>><><<<>>>><<>>><<<<>><<<><>>><><<><<><<><<<><<<>>>><<<>>>><<<<><>>>><>>><>><<>>><<<><>><<<<>>>><><<<>>><<<>><<><<<>>><<><<<>><<<><<<<>>><<>>>><<>>><<<><<<>><<><><<>>>><<>><<<>>>><<>>><<<<>>><<<<>>><<<>>>><<<<>><<<>>><<>>><<>>><>>><<>>><<>>><<<<>><<<<><<>><<<<>>>><>>><<>>>><<<<>><>><>>>><><>>>><>>>><<<>><<<<>>>><<<>>><<>>><<<<><<>><<<<>>><<<>>>><>>>><<<>><<<><<<>><<<<>><<><<>>><><<<<>><>><<>>><><<<<>>><<>>><<<><<>><<>><>><<>><<>>>><<<><<<<>>>><<<>>><<>><<<<>>><<<<>><><<<<>>>><<<<><>><>>>><<<><<>>>><<>>><<>><<<<>>>><><>><<<><>>>><<<>>><<<>>><>><<>>>><<<><<<><<<<><<>><<<>>><<<<>><<<<><<<<><<<>>>><<<><><<<<>><<><<>>>")
