(in-package :gdl-user)(gdl:define-package :aoc2022-day-15)
(in-package :aoc2022-day-15)

(defparameter *puzzle-input* nil) (defparameter *puzzle-input-test* nil)



(defun part-1 ()
  (the-object (make-object 'puzzle
                           :puzzle-input *puzzle-input*
                           :row-of-interest 2000000) answer))

(defun part-2 ()
  (the-object (make-object 'puzzle
                           :puzzle-input *puzzle-input* :puzzle-part 2) answer))




(define-object puzzle ()
  :input-slots ((puzzle-input *puzzle-input-test*)
                (puzzle-part 1)
                (row-of-interest 10))

  :computed-slots ((answer (ecase (the puzzle-part)
                             (1 (the map (count-in-zone (the row-of-interest))))
                             ))

                   (sensor-plists
                   (mapcar
                     #'(lambda(line)
                         (destructuring-bind (sensor beacon)
                             (glisp:split-regexp ":" line)
                           (let ((sensor (subseq sensor #.(length "Sensor at ")))
                                 (beacon (subseq beacon #.(length " closest beacon is at "))))
                             (destructuring-bind (sx sy)(glisp:split-regexp "," sensor)
                               (setq sx (parse-integer (second (glisp:split-regexp "=" sx))))
                               (setq sy (parse-integer (second (glisp:split-regexp "=" sy))))
                               (destructuring-bind (bx by)(glisp:split-regexp "," beacon)
                                 (setq bx (parse-integer (second (glisp:split-regexp "=" bx))))
                                 (setq by (parse-integer (second (glisp:split-regexp "=" by))))
                                 (list :sensor (vec sx sy)
                                       :beacon (vec bx by)))))))
                     (glisp:split-regexp "\\n" (the puzzle-input)))))


  :objects ((map :type 'map
                 :pass-down (sensor-plists))))

(define-object map ()
  :input-slots (sensor-plists (empty-char #\.) (zone-char #\#))

  :computed-slots (
                   (x-delta (- (the x-max) (the x-min)))
                   ;;(y-delta (- (the y-max) (the y-min)))
                   (x-min (the (extreme #'min #'get-x)))
                   (x-max (1+ (the (extreme #'max #'get-x))))
                   ;;(y-min (the (extreme #'min #'get-y)))
                   ;;(y-max (1+ (the (extreme #'max #'get-y))))

                   (sensor-hash (let ((ht (make-hash-table :test #'equalp)))
                                  (dolist (sensor (list-elements (the sensors)) ht)
                                    (setf (gethash (theo sensor sensor) ht) t))))
                   
                   (beacon-hash (let ((ht (make-hash-table :test #'equalp)))
                                  (dolist (sensor (list-elements (the sensors)) ht)
                                    (setf (gethash (theo sensor beacon) ht) t)))))


  :objects ((sensors :type 'sensor
                     :sequence (:size (length (the sensor-plists)))
                     :plist (nth (the-child index) (the sensor-plists))))

  
  :functions ((extreme (func accessor)
                       (apply func (mapcar #'(lambda (point)
                                               (funcall accessor point))
                                           (mapcan #'(lambda(plist)(plist-values plist))
                                                   (the sensor-plists)))))
              (count-in-zone
               (row)
               (let ((count 0)
                     (width (* (the x-delta) 3))
                     (offset (- (the x-min) (the x-delta)))
                     (sensor-hash (the sensor-hash))
                     (beacon-hash (the beacon-hash))
                     (sensor-list (list-elements (the sensors))))
                 (dotimes (col width count)
                   (let* ((col (+ col offset)))
                     (when (zerop (mod col 100000)) (print-variables col))
                     (when (the (in-a-zone? (vec col row) sensor-hash beacon-hash sensor-list))
                       (incf count))))))

              (in-a-zone? (point sensor-hash beacon-hash sensor-list)
                          (unless (or (gethash point sensor-hash)
                                      (gethash point beacon-hash))
                            (dolist (sensor sensor-list)
                              (when (theo sensor (in-zone? point))
                                (return-from :in-a-zone? t)))))))


(defun manhattan-distance (sensor beacon)
  (declare (type (simple-array fixnum 2) sensor beacon))
  (+ (abs (- (get-x sensor) (get-x beacon)))
     (abs (- (get-y sensor) (get-y beacon)))))


(define-object sensor ()
  :input-slots (plist)

  :computed-slots ((sensor (getf (the plist) :sensor))
                   (beacon (getf (the plist) :beacon))
                   (distance (manhattan-distance (the sensor) (the beacon))))

  :functions ((in-zone?
               (point)
               (<= (manhattan-distance (the sensor) point) (the distance)))))



(defun vec (x y) (make-array 2 :initial-contents (list x y)))


(setq *puzzle-input-test* "Sensor at x=2, y=18: closest beacon is at x=-2, y=15
Sensor at x=9, y=16: closest beacon is at x=10, y=16
Sensor at x=13, y=2: closest beacon is at x=15, y=3
Sensor at x=12, y=14: closest beacon is at x=10, y=16
Sensor at x=10, y=20: closest beacon is at x=10, y=16
Sensor at x=14, y=17: closest beacon is at x=10, y=16
Sensor at x=8, y=7: closest beacon is at x=2, y=10
Sensor at x=2, y=0: closest beacon is at x=2, y=10
Sensor at x=0, y=11: closest beacon is at x=2, y=10
Sensor at x=20, y=14: closest beacon is at x=25, y=17
Sensor at x=17, y=20: closest beacon is at x=21, y=22
Sensor at x=16, y=7: closest beacon is at x=15, y=3
Sensor at x=14, y=3: closest beacon is at x=15, y=3
Sensor at x=20, y=1: closest beacon is at x=15, y=3")

(setq *puzzle-input* "Sensor at x=3391837, y=2528277: closest beacon is at x=3448416, y=2478759
Sensor at x=399473, y=1167503: closest beacon is at x=1188862, y=2000000
Sensor at x=3769110, y=2896086: closest beacon is at x=4076658, y=2478123
Sensor at x=900438, y=3835648: closest beacon is at x=-435606, y=3506717
Sensor at x=2913762, y=3937542: closest beacon is at x=2964244, y=3612685
Sensor at x=3646459, y=3446878: closest beacon is at x=3264675, y=3635510
Sensor at x=1182092, y=2135147: closest beacon is at x=1188862, y=2000000
Sensor at x=3213897, y=2710772: closest beacon is at x=3448416, y=2478759
Sensor at x=3242113, y=3984214: closest beacon is at x=3264675, y=3635510
Sensor at x=2809237, y=3782833: closest beacon is at x=2872059, y=3592616
Sensor at x=2962421, y=37354: closest beacon is at x=3358601, y=-1111474
Sensor at x=3456740, y=2458922: closest beacon is at x=3448416, y=2478759
Sensor at x=1799203, y=3569221: closest beacon is at x=2872059, y=3592616
Sensor at x=3907873, y=3898376: closest beacon is at x=3264675, y=3635510
Sensor at x=3481951, y=2453964: closest beacon is at x=3448416, y=2478759
Sensor at x=1120077, y=2963237: closest beacon is at x=1188862, y=2000000
Sensor at x=2901181, y=3029961: closest beacon is at x=2872059, y=3592616
Sensor at x=3111105, y=3361570: closest beacon is at x=2964244, y=3612685
Sensor at x=2533601, y=3956413: closest beacon is at x=2872059, y=3592616
Sensor at x=108898, y=2275290: closest beacon is at x=1188862, y=2000000
Sensor at x=3501591, y=2414995: closest beacon is at x=3448416, y=2478759
Sensor at x=3035657, y=3700769: closest beacon is at x=2964244, y=3612685
Sensor at x=1286795, y=298997: closest beacon is at x=308571, y=-434280
Sensor at x=200812, y=3470019: closest beacon is at x=-435606, y=3506717
Sensor at x=2550124, y=1556776: closest beacon is at x=1188862, y=2000000
Sensor at x=3955070, y=601908: closest beacon is at x=4076658, y=2478123
Sensor at x=3565419, y=2355172: closest beacon is at x=3448416, y=2478759")
